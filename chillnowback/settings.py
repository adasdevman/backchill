"""
Django settings for chillnowback project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv # type: ignore
import logging.config
from datetime import timedelta
import dj_database_url
from decouple import config

# Définir BASE_DIR d'abord
BASE_DIR = Path(__file__).resolve().parent.parent

# Puis charger les variables d'environnement
load_dotenv(os.path.join(BASE_DIR, '.env'))

SECRET_KEY = os.getenv('SECRET_KEY')

DEBUG = os.getenv('DEBUG') == 'True'

ALLOWED_HOSTS = ['https://chillbackend.onrender.com', 'localhost', '127.0.0.1','chillbackend.onrender.com','*']  # En développement uniquement

# Configuration fuseau horaire
TIME_ZONE = 'UTC'  # Fuseau horaire standard
USE_TZ = True      # Activer la gestion des fuseaux horaires

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap4',
    'core',
    'users',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'corsheaders',
    'api',
    'cloudinary_storage',
    'cloudinary',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'chillnowback.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'django.template.context_processors.media',
            ],
        },
    },
]

DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL')
    )
}

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql',
 #       'NAME': os.getenv('DB_NAME'),
  ##      'USER': os.getenv('DB_USER'),
    #    'PASSWORD': os.getenv('DB_PASSWORD'),
     #   'HOST': os.getenv('DB_HOST'),
      #  'PORT': os.getenv('DB_PORT'),
    #}
#}

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = [
    'users.auth.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Chemin relatif dans le projet

LOGIN_URL = '/dashboard/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/dashboard/login/'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = 'bootstrap4'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuration des médias
MEDIA_DIRS = [
    os.path.join(MEDIA_ROOT, 'annonces/photos'),
]

# Créer les dossiers nécessaires au démarrage
for directory in MEDIA_DIRS:
    os.makedirs(directory, exist_ok=True)

# Configuration du logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'core': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Configuration REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authtoken.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

# Configuration JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),  # Durée de vie du token d'accès
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),  # Durée de vie du token de rafraîchissement (1 mois)
    'ROTATE_REFRESH_TOKENS': True,  # Générer un nouveau refresh token à chaque utilisation
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklister l'ancien refresh token
    'UPDATE_LAST_LOGIN': True,  # Mettre à jour le champ last_login
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    
    'JTI_CLAIM': 'jti',
}

# Configuration CORS
CORS_ALLOW_ALL_ORIGINS = True  # En développement uniquement
CORS_ALLOW_CREDENTIALS = True

# Vous pouvez décommenter et mettre à jour ces lignes si vous voulez être plus restrictif
CORS_ALLOWED_ORIGINS = [
     "http://192.168.1.2:8081",
     "http://192.168.8.101:8081",
     "http://172.20.10.3:8081",
     "http://192.168.1.168:8081"
 ]

# Ajout des headers nécessaires
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Configuration pour le responsive design
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Configuration de WhiteNoise pour la gestion des fichiers statiques
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Configuration CinetPay
CINETPAY = {
    'SITE_ID': os.getenv('CINETPAY_SITE_ID'),
    'API_KEY': os.getenv('CINETPAY_API_KEY'),
    'ENVIRONMENT': os.getenv('CINETPAY_ENVIRONMENT', 'PROD'),
    'NOTIFY_URL': 'https://chillbackend.onrender.com/api/cinetpay/webhook/',  # URL de notification
    'RETURN_URL': 'https://chillbackend.onrender.com/api/payment/success/',    # URL de retour après paiement
    'CANCEL_URL': 'https://chillbackend.onrender.com/api/payment/cancel/',     # URL en cas d'annulation
}

# Brevo (Sendinblue) Configuration
BREVO_API_KEY = os.getenv('BREVO_API_KEY')

# Configuration Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp-relay.brevo.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'chillnow.app@gmail.com'
EMAIL_HOST_PASSWORD = BREVO_API_KEY
DEFAULT_FROM_EMAIL = 'ChillNow <chillnow.app@gmail.com>'

# Modification de la configuration WhiteNoise
WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_AUTOREFRESH = True

# Configuration Cloudinary
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME', 'chillnow'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY', '583847349674718'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET'),
}

# Configuration des médias avec Cloudinary
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Configuration Facebook
FACEBOOK_APP_ID = '1220457469712501'
FACEBOOK_APP_SECRET = 'd81db202da5ea8164f176c8a5c7e6f2a'
